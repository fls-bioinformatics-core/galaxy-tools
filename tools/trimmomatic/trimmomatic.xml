<tool id="trimmomatic" name="Trimmomatic" version="0.36.0">
  <description>flexible read trimming tool for Illumina NGS data</description>
  <requirements>
    <requirement type="package" version="0.36">trimmomatic</requirement>
  </requirements>
  <stdio>
    <exit_code range="1:" />
  </stdio>
  <command interpreter="bash"><![CDATA[
  trimmomatic.sh
  -mx8G
  -jar \$TRIMMOMATIC_DIR/trimmomatic-0.36.jar
  #if $paired_end.is_paired_end
    PE -threads \${GALAXY_SLOTS:-6} -phred33
    #set $paired_input_type = $paired_end.paired_input_type_conditional.paired_input_type
    #if $paired_input_type == "pair_of_files"
      "${paired_end.paired_input_type_conditional.fastq_r1_in}"
      "${paired_end.paired_input_type_conditional.fastq_r2_in}"
      "${fastq_out_r1_paired}" "${fastq_out_r1_unpaired}"
      "${fastq_out_r2_paired}" "${fastq_out_r2_unpaired}"
    #else
      "${paired_end.paired_input_type_conditional.fastq_pair.forward}"
      "${paired_end.paired_input_type_conditional.fastq_pair.reverse}"
      "${fastq_out_paired.forward}" "${fastq_out_unpaired.forward}"
      "${fastq_out_paired.reverse}" "${fastq_out_unpaired.reverse}"
    #end if
  #else
    SE -threads \${GALAXY_SLOTS:-6} -phred33 "$fastq_in" "$fastq_out"
  #end if
  ## ILLUMINACLIP option
  #if $illuminaclip.do_illuminaclip
    #if $paired_end.is_paired_end
      ILLUMINACLIP:\$TRIMMOMATIC_ADAPTERS_DIR/$illuminaclip.adapter_fasta:$illuminaclip.seed_mismatches:$illuminaclip.palindrome_clip_threshold:$illuminaclip.simple_clip_threshold:$illuminaclip.min_adapter_len:$illuminaclip.keep_both_reads
    #else
      ILLUMINACLIP:\$TRIMMOMATIC_ADAPTERS_DIR/$illuminaclip.adapter_fasta:$illuminaclip.seed_mismatches:$illuminaclip.palindrome_clip_threshold:$illuminaclip.simple_clip_threshold
    #end if
  #end if
  ## Other operations
  #for $op in $operations
    ## SLIDINGWINDOW
    #if str( $op.operation.name ) == "SLIDINGWINDOW"
      SLIDINGWINDOW:$op.operation.window_size:$op.operation.required_quality
    #end if
    ## MINLEN:36
    #if str( $op.operation.name ) == "MINLEN"
      MINLEN:$op.operation.minlen
    #end if
    #if str( $op.operation.name ) == "LEADING"
      LEADING:$op.operation.leading
    #end if
    #if str( $op.operation.name ) == "TRAILING"
      TRAILING:$op.operation.trailing
    #end if
    #if str( $op.operation.name ) == "CROP"
      CROP:$op.operation.crop
    #end if
    #if str( $op.operation.name ) == "HEADCROP"
      HEADCROP:$op.operation.headcrop
    #end if
    #if str( $op.operation.name ) == "AVGQUAL"
      AVGQUAL:$op.operation.avgqual
    #end if
    #if str( $op.operation.name ) == "MAXINFO"
      MAXINFO:$op.operation.target_length:$op.operation.strictness
    #end if
  #end for
  ]]></command>
  <inputs>
    <conditional name="paired_end">
    <param name="is_paired_end" type="boolean" label="Paired end data?" truevalue="yes" falsevalue="no" checked="true" />
    <when value="no">
      <param name="fastq_in" type="data" format="fastqsanger" label="Input FASTQ file" />
    </when>
    <when value="yes">
      <conditional name="paired_input_type_conditional">
        <param name="paired_input_type" type="select" label="Input Type">
          <option value="pair_of_files" selected="true">Pair of datasets</option>
          <option value="collection">Dataset collection pair</option>
        </param>
        <when value="pair_of_files">
 	  <param name="fastq_r1_in" type="data" format="fastqsanger"
		 label="Input FASTQ file (R1/first of pair)" />
 	  <param name="fastq_r2_in" type="data" format="fastqsanger"
		 label="Input FASTQ file (R2/second of pair)" />
	</when>
        <when value="collection">
          <param name="fastq_pair" format="fastqsanger" type="data_collection"
 		 collection_type="paired"
 		 label="Select FASTQ dataset collection with R1/R2 pair" />
        </when>
      </conditional>
    </when>
    </conditional>
    <conditional name="illuminaclip">
    <param name="do_illuminaclip" type="boolean" label="Perform initial ILLUMINACLIP step?" help="Cut adapter and other illumina-specific sequences from the read" truevalue="yes" falsevalue="no" checked="false" />
    <when value="yes">
      <param name="adapter_fasta" type="select" label="Adapter sequences to use">
	<option value="TruSeq2-SE.fa">TruSeq2 (single-ended, for Illumina GAII)</option>
	<option value="TruSeq3-SE.fa">TruSeq3 (single-ended, for MiSeq and HiSeq)</option>
	<option value="TruSeq2-PE.fa">TruSeq2 (paired-ended, for Illumina GAII)</option>
	<option value="TruSeq3-PE.fa">TruSeq3 (paired-ended, for MiSeq and HiSeq)</option>
	<option value="TruSeq3-PE-2.fa">TruSeq3 (additional seqs) (paired-ended, for MiSeq and HiSeq)</option>
	<option value="NexteraPE-PE.fa">Nextera (paired-ended)</option>
      </param>
      <param name="seed_mismatches" type="integer" label="Maximum mismatch count which will still allow a full match to be performed" value="2" />
      <param name="palindrome_clip_threshold" type="integer" label="How accurate the match between the two 'adapter ligated' reads must be for PE palindrome read alignment" value="30" />
      <param name="simple_clip_threshold" type="integer" label="How accurate the match between any adapter etc. sequence must be against a read" value="10" />
      <param name="min_adapter_len" type="integer" label="Minimum length of adapter that needs to be detected (PE specific/palindrome mode)" value="2" />
      <param name="keep_both_reads" type="boolean" label="Always keep both reads (PE specific/palindrome mode)?" help="After read-though has been detected by palindrome mode, and the adapter sequence removed, the reverse read contains the same sequence information as the forward read, albeit in reverse complement. For this reason, the default behaviour is to entirely drop the reverse read. By specifying „true‟ for this parameter, the reverse read will also be retained, which may be useful e.g. if the downstream tools cannot handle a combination of paired and unpaired reads." truevalue="true" falsevalue="false" checked="true" />
    </when>
    <when value="no" /> <!-- empty clause to satisfy planemo lint -->
    </conditional>
    <repeat name="operations" title="Trimmomatic Operation" min="1">
      <conditional name="operation">
	<param name="name" type="select" label="Select Trimmomatic operation to perform">
	  <option selected="true" value="SLIDINGWINDOW">Sliding window trimming (SLIDINGWINDOW)</option>
	  <option value="MINLEN">Drop reads below a specified length (MINLEN)</option>
	  <option value="LEADING">Cut bases off the start of a read, if below a threshold quality (LEADING)</option>
	  <option value="TRAILING">Cut bases off the end of a read, if below a threshold quality (TRAILING)</option>
	  <option value="CROP">Cut the read to a specified length (CROP)</option>
	  <option value="HEADCROP">Cut the specified number of bases from the start of the read (HEADCROP)</option>
	  <option value="AVGQUAL">Drop reads with average quality lower than a specified level (AVGQUAL)</option>
	  <option value="MAXINFO">Trim reads adaptively, balancing read length and error rate to maximise the value of each read (MAXINFO)</option>
	</param>
	<when value="SLIDINGWINDOW">
	  <param name="window_size" type="integer" label="Number of bases to average across" value="4" />
	  <param name="required_quality" type="integer" label="Average quality required" value="20" />
	</when>
	<when value="MINLEN">
	  <param name="minlen" type="integer" label="Minimum length of reads to be kept" value="20" />
	</when>
	<when value="LEADING">
	  <param name="leading" type="integer" label="Minimum quality required to keep a base" value="3" help="Bases at the start of the read with quality below the threshold will be removed" />
	</when>
	<when value="TRAILING">
	  <param name="trailing" type="integer" label="Minimum quality required to keep a base" value="3" help="Bases at the end of the read with quality below the threshold will be removed" />
	</when>
	<when value="CROP">
	  <param name="crop" type="integer" label="Number of bases to keep from the start of the read" value="" />
	</when>
	<when value="HEADCROP">
	  <param name="headcrop" type="integer" label="Number of bases to remove from the start of the read" value="" />
	</when>
	<when value="AVGQUAL">
	  <param name="avgqual" type="integer" label="Minimum average quality required to keep a read" value="" />
	</when>
	<when value="MAXINFO">
	  <param name="target_length" type="integer" label="Target read length" value="" help="The read length which is likely to allow the location of the read within the target sequence to be determined." />
	  <param name="strictness" type="float" label="Strictness" value="" help="Set between zero and one - specifies the balance between preserving read length versus removal of incorrect bases; low values (&lt;0.2) favours longer reads, high values (&gt;0.8) favours read correctness." />
	</when>
      </conditional>
    </repeat>
  </inputs>
  <outputs>
    <data format="fastqsanger" name="fastq_out_r1_paired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_r1_in.name} (R1 paired)">
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "pair_of_files"</filter>
    </data>
    <data format="fastqsanger" name="fastq_out_r2_paired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_r2_in.name} (R2 paired)">
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "pair_of_files"</filter>
    </data>
    <data format="fastqsanger" name="fastq_out_r1_unpaired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_r1_in.name} (R1 unpaired)">
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "pair_of_files"</filter>
    </data>
    <data format="fastqsanger" name="fastq_out_r2_unpaired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_r2_in.name} (R2 unpaired)">
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "pair_of_files"</filter>
    </data>
    <data format="fastqsanger" name="fastq_out" label="${tool.name} on ${paired_end.fastq_in.name}">
      <filter>not paired_end['is_paired_end']</filter>
    </data>
    <collection name="fastq_out_paired" type="paired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.name}: paired">
      <data name="forward" format="fastqsanger" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.forward.name} (R1 paired)" />
      <data name="reverse" format="fastqsanger" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.reverse.name} (R2 paired)" />
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "collection"</filter>
    </collection>
    <collection name="fastq_out_unpaired" type="paired" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.name}: unpaired">
      <data name="forward" format="fastqsanger" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.forward.name} (R1 unpaired)" />
      <data name="reverse" format="fastqsanger" label="${tool.name} on ${paired_end.paired_input_type_conditional.fastq_pair.reverse.name} (R2 unpaired)" />
      <filter>paired_end['is_paired_end']</filter>
      <filter>paired_end['paired_input_type_conditional']['paired_input_type'] == "collection"</filter>
    </collection>
  </outputs>
  <tests>
    <test>
      <!-- Single-end example -->
      <param name="is_paired_end" value="no" />
      <param name="fastq_in" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
      <param name="operations_0|operation|name" value="SLIDINGWINDOW" />
      <!--
      **NB** outputs have to be specified in order that they appear in the
      tool (which is the order they will be written to the history) - the
      test framework seems to use the order and ignores the "name" attribute
      -->
      <output name="fastq_out" file="trimmomatic_se_out1.fastq" />
    </test>
    <test>
      <!-- Paired-end example -->
      <param name="is_paired_end" value="yes" />
      <param name="fastq_r1_in" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
      <param name="fastq_r2_in" value="Illumina_SG_R2.fastq" ftype="fastqsanger" />
      <param name="operations_0|operation|name" value="SLIDINGWINDOW" />
      <!--
      **NB** outputs have to be specified in order that they appear in the
      tool (which is the order they will be written to the history) - the
      test framework seems to use the order and ignores the "name" attribute
      -->
      <output name="fastq_out_r1_paired" file="trimmomatic_pe_r1_paired_out1.fastq" />
      <output name="fastq_out_r1_unpaired" file="trimmomatic_pe_r1_unpaired_out1.fastq" />
      <output name="fastq_out_r2_paired" file="trimmomatic_pe_r2_paired_out1.fastq" />
      <output name="fastq_out_r2_unpaired" file="trimmomatic_pe_r2_unpaired_out1.fastq" />
    </test>
    <test>
      <!-- Single-end example (cropping) -->
      <param name="is_paired_end" value="no" />
      <param name="fastq_in" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
      <param name="operations_0|operation|name" value="CROP" />
      <param name="operations_0|operation|crop" value="10" />
      <!--
      **NB** outputs have to be specified in order that they appear in the
      tool (which is the order they will be written to the history) - the
      test framework seems to use the order and ignores the "name" attribute
      -->
      <output name="fastq_out" file="trimmomatic_se_out2.fastq" />
    </test>
    <test>
      <!-- Paired-end with dataset collection -->
      <param name="is_paired_end" value="yes" />
      <param name="paired_input_type" value="collection" />
      <param name="fastq_pair">
        <collection type="paired">
          <element name="forward" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
          <element name="reverse" value="Illumina_SG_R2.fastq" ftype="fastqsanger"/>
        </collection>
      </param>
      <param name="operations_0|operation|name" value="SLIDINGWINDOW" />
      <output_collection name="fastq_out_paired" type="paired">
	<element name="forward" file="trimmomatic_pe_r1_paired_out1.fastq" />
	<element name="reverse" file="trimmomatic_pe_r2_paired_out1.fastq" />
      </output_collection>
      <output_collection name="fastq_out_unpaired" type="paired">
	<element name="forward" file="trimmomatic_pe_r1_unpaired_out1.fastq" />
	<element name="reverse" file="trimmomatic_pe_r2_unpaired_out1.fastq" />
      </output_collection>
    </test>
    <test>
      <!-- Single-end using AVGQUAL -->
      <param name="is_paired_end" value="no" />
      <param name="fastq_in" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
      <param name="operations_0|operation|name" value="AVGQUAL" />
      <param name="operations_0|operation|avgqual" value="30" />
      <output name="fastq_out" file="trimmomatic_avgqual.fastq" />
    </test>
    <test>
      <!-- Single-end using MAXINFO -->
      <param name="is_paired_end" value="no" />
      <param name="fastq_in" value="Illumina_SG_R1.fastq" ftype="fastqsanger" />
      <param name="operations_0|operation|name" value="MAXINFO" />
      <param name="operations_0|operation|target_length" value="75" />
      <param name="operations_0|operation|strictness" value="0.8" />
      <output name="fastq_out" file="trimmomatic_maxinfo.fastq" />
    </test>
  </tests>
  <help><![CDATA[
.. class:: infomark

**What it does**

Trimmomatic performs a variety of useful trimming tasks for illumina paired-end and
single ended data.

This tool allows the following trimming steps to be performed:

 * **ILLUMINACLIP:** Cut adapter and other illumina-specific sequences from the read
 * **SLIDINGWINDOW:** Perform a sliding window trimming, cutting once the average
   quality within the window falls below a threshold
 * **MINLEN:** Drop the read if it is below a specified length
 * **LEADING:** Cut bases off the start of a read, if below a threshold quality
 * **TRAILING:** Cut bases off the end of a read, if below a threshold quality
 * **CROP:** Cut the read to a specified length
 * **HEADCROP:** Cut the specified number of bases from the start of the read
 * **AVGQUAL:** Drop the read if the average quality is below a specified value
 * **MAXINFO:** Trim reads adaptively, balancing read length and error rate to
   maximise the value of each read

If ILLUMINACLIP is requested then it is always performed first; subsequent options
can be mixed and matched and will be performed in the order that they have been
specified.

.. class:: warningmark

Note that trimming operation order is important.

-------------

.. class:: infomark

**Inputs**

For single-end data this Trimmomatic tool accepts a single FASTQ file; for
paired-end data it will accept either two FASTQ files (R1 and R2), or a
dataset collection containing the R1/R2 FASTQ pair.

.. class:: infomark

**Outputs**

For paired-end data a particular strength of Trimmomatic is that it retains the
pairing of reads (from R1 and R2) in the filtered output files:

 * Two FASTQ files (R1-paired and R2-paired) contain one read from each pair where
   both have survived filtering.
 * Additionally two FASTQ files (R1-unpaired and R2-unpaired) contain reads where
   one of the pair failed the filtering steps.

.. class:: warningmark

If the input consists of a dataset collection with the R1/R2 FASTQ pair then
the outputs will also inclue two dataset collections: one for the 'paired'
outputs and one for the 'unpaired' (as described above)

Retaining the same order and number of reads in the filtered output fastq files is
essential for many downstream analysis tools.

For single-end data the output is a single FASTQ file containing just the filtered
reads.

-------------

.. class:: infomark

**Credits**

This Galaxy tool has been developed within the Bioinformatics Core Facility at the
University of Manchester. It runs the Trimmomatic program which has been developed
within Bjorn Usadel's group at RWTH Aachen university.

Trimmomatic website (including documentation):

 * http://www.usadellab.org/cms/index.php?page=trimmomatic

The reference for Trimmomatic is:

 * Bolger, A.M., Lohse, M., &amp; Usadel, B. (2014). Trimmomatic: A flexible trimmer
   for Illumina Sequence Data. Bioinformatics, btu170.

Please kindly acknowledge both this Galaxy tool and the Trimmomatic program if you
use it.
  ]]></help>
  <citations>
    <!--
    See https://wiki.galaxyproject.org/Admin/Tools/ToolConfigSyntax#A.3Ccitations.3E_tag_set
    Can be either DOI or Bibtex
    Use http://www.bioinformatics.org/texmed/ to convert PubMed to Bibtex
    -->
    <citation type="doi">10.1093/bioinformatics/btu170</citation>
  </citations>
</tool>
